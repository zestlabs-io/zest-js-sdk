{
  "swagger": "2.0",
  "info": {
    "title": "auth",
    "version": "1.0",
    "contact": {
      "name": "Zest Labs GmbH",
      "url": "https://zestlabs.io",
      "email": "contact@zestlabs.io"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/auth/v1/accesskey": {
      "post": {
        "summary": "CreateAccessKey creates a new access key for user",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`CreateAccessKey`\n\t\tScope:\t\t\tuser ID",
        "operationId": "AuthService_CreateAccessKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAccessKeyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAccessKeyRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/accesskey/{accessKeyID}": {
      "delete": {
        "summary": "DeleteAccessKey deletes access key for user",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`DeleteAccessKey`\n\t\tScope:\t\t\tuser ID",
        "operationId": "AuthService_DeleteAccessKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAccessKeyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "accessKeyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/account": {
      "get": {
        "operationId": "AuthService_GetOwnAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAccountResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/account/{account.accountID}": {
      "put": {
        "operationId": "AuthService_UpdateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAccountResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "account.accountID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateAccountRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/check-hmac": {
      "post": {
        "summary": "Auth API",
        "operationId": "AuthService_CheckHMACAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckHMACAuthResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckHMACAuthRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/check-token": {
      "post": {
        "operationId": "AuthService_CheckTokenAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckTokenAuthResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckTokenAuthRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/check-username-exists": {
      "post": {
        "summary": "CheckUsernameExists checks in the database if there is already user with the same username\nIf userID is provided and there is already defined username for this userID the method\nwi return false, so that the username can be used for this user",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`CheckUsernameExists`\n\t\tScope:\t\t\t`*`",
        "operationId": "AuthService_CheckUsernameExists",
        "responses": {
          "200": {
            "description": "Returned when check was performed successfuly.",
            "schema": {
              "$ref": "#/definitions/v1CheckUsernameExistsResponse"
            }
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckUsernameExistsRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/client": {
      "post": {
        "summary": "CreateClient will try to create a new oidc client for the account with the\naccountID concatenated with suffix provided in the request. If the client already exists\nor there are already 20 clients, an error will be returned.",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`CreateClient`\n\t\tScope:",
        "operationId": "AuthService_CreateClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateClientResponse"
            },
            "examples": {
              "application/json": {
                "client": "The client that have been created"
              }
            }
          },
          "400": {
            "description": "Returned when no valid client ID is provided in the request, or the account has already has 20 clients.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateClientRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/client/{id}": {
      "delete": {
        "summary": "DeleteClient will delete the client with the provided ID and return\nan error, if a key with this ID does not exist, or is not part of accounts clients",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`DeleteClient`\n\t\tScope:\t\t\tclient ID",
        "operationId": "AuthService_DeleteClient",
        "responses": {
          "200": {
            "description": "Returned when Client is successfuly deleted.",
            "schema": {
              "$ref": "#/definitions/v1DeleteClientResponse"
            }
          },
          "400": {
            "description": "Returned when no valid client ID is provided in the request.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when a user with the provided ID could not be found within the scope of the account.",
            "schema": {}
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "put": {
        "summary": "UpdateClient updates the data for account client.",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`UpdateClient`\n\t\tScope:\t\t\t`id`",
        "operationId": "AuthService_UpdateClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateClientResponse"
            },
            "examples": {
              "application/json": {
                "client": "The client that have been updated"
              }
            }
          },
          "400": {
            "description": "Returned when no valid client ID is provided in the request.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when a client ID could not be found within the scope of the account.",
            "schema": {}
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateClientRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/clients": {
      "get": {
        "summary": "GetClients loads all clients for account.",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`GetClients`\n\t\tScope:\t\t\t``",
        "operationId": "AuthService_GetClients",
        "responses": {
          "200": {
            "description": "Returned when clients are successfuly fetched.",
            "schema": {
              "$ref": "#/definitions/v1GetClientsResponse"
            }
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/default-policies": {
      "get": {
        "operationId": "AuthService_GetDefaultPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultPoliciesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/federation": {
      "post": {
        "summary": "CreateFederationConfig will try to create a new oidc federation configuration, \nthat can be attached to users. The maximum registered federated configurations per account are 3.",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`CreateFederationConfig`\n\t\tScope:",
        "operationId": "AuthService_CreateFederationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateFederationConfigResponse"
            },
            "examples": {
              "application/json": {
                "config": "The config that have been created"
              }
            }
          },
          "400": {
            "description": "Returned when no valid client ID is provided in the request, or the account has already has 3 federation configs.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateFederationConfigRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/password-policy": {
      "get": {
        "operationId": "AuthService_GetPasswordPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPasswordPolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/policies": {
      "get": {
        "operationId": "AuthService_GetPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPoliciesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/policy": {
      "post": {
        "operationId": "AuthService_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "put": {
        "operationId": "AuthService_UpdatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePolicyRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/policy/{policyID}": {
      "get": {
        "summary": "RBAC API",
        "operationId": "AuthService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "policyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "operationId": "AuthService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeletePolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "policyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/reset-password": {
      "post": {
        "operationId": "AuthService_ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetPasswordResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role": {
      "post": {
        "operationId": "AuthService_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "put": {
        "operationId": "AuthService_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/policies/add": {
      "post": {
        "operationId": "AuthService_AddPoliciesToRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddPoliciesToRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddPoliciesToRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/policies/remove": {
      "post": {
        "operationId": "AuthService_RemovePoliciesFromRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemovePoliciesFromRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemovePoliciesFromRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/users/add": {
      "post": {
        "operationId": "AuthService_AddUsersToRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddUsersToRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddUsersToRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/users/remove": {
      "post": {
        "operationId": "AuthService_RemoveUsersFromRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveUsersFromRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveUsersFromRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/users/{roleID}": {
      "get": {
        "operationId": "AuthService_GetUsersForRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersForRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "roleID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/{roleID}": {
      "get": {
        "operationId": "AuthService_GetRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "roleID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "operationId": "AuthService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "roleID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/roles": {
      "get": {
        "operationId": "AuthService_GetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRolesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/set-password": {
      "post": {
        "summary": "Password API",
        "operationId": "AuthService_SetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetPasswordResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetPasswordRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user": {
      "post": {
        "operationId": "AuthService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user-id-by-email/{email}": {
      "get": {
        "operationId": "AuthService_GetUserIDByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserIDByEmailResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/accesskeys/{userID}": {
      "get": {
        "summary": "GetUserAccessKeys returns all access keys by user",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`GetUserAccessKeys`\n\t\tScope:\t\t\t`*`",
        "operationId": "AuthService_GetUserAccessKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserAccessKeysResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/policies/add": {
      "post": {
        "operationId": "AuthService_AddPoliciesToUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddPoliciesToUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddPoliciesToUserRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/policies/remove": {
      "post": {
        "operationId": "AuthService_RemovePoliciesFromUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemovePoliciesFromUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemovePoliciesFromUserRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/{user.userID}": {
      "put": {
        "operationId": "AuthService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "user.userID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/{userID}": {
      "get": {
        "operationId": "AuthService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "operationId": "AuthService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/userinfo": {
      "get": {
        "summary": "User API",
        "operationId": "AuthService_GetUserInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserInfoResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/users": {
      "get": {
        "operationId": "AuthService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    }
  },
  "definitions": {
    "AccountAccountStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "ACTIVE",
        "DISABLED",
        "DELETED"
      ],
      "default": "PENDING"
    },
    "PaymentDetailsPaymentType": {
      "type": "string",
      "enum": [
        "CreditCard",
        "Paypal",
        "DirectDebig",
        "Invoice"
      ],
      "default": "CreditCard"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AccessKey": {
      "type": "object",
      "properties": {
        "accessKeyID": {
          "type": "string"
        },
        "lastUsedAt": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1Account": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/AccountAccountStatus"
        },
        "paymentDetails": {
          "$ref": "#/definitions/v1PaymentDetails"
        },
        "contactDetails": {
          "$ref": "#/definitions/v1ContactDetails"
        }
      }
    },
    "v1Action": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "call": {
          "type": "string"
        }
      }
    },
    "v1AddPoliciesToRoleRequest": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddPoliciesToRoleResponse": {
      "type": "object",
      "properties": {
        "failedPolicyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddPoliciesToUserRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddPoliciesToUserResponse": {
      "type": "object",
      "properties": {
        "failedPolicyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddUsersToRoleRequest": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddUsersToRoleResponse": {
      "type": "object",
      "properties": {
        "failedUserIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CheckHMACAuthRequest": {
      "type": "object",
      "properties": {
        "httpMethod": {
          "type": "string"
        },
        "requestPath": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "authKey": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "md5Body": {
          "type": "string"
        },
        "validity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CheckHMACAuthResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "format": "byte"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "v1CheckTokenAuthRequest": {
      "type": "object",
      "properties": {
        "authKey": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "validity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CheckTokenAuthResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "format": "byte"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "v1CheckUsernameExistsRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        }
      }
    },
    "v1CheckUsernameExistsResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1ContactDetails": {
      "type": "object",
      "properties": {
        "main": {
          "type": "string"
        },
        "finance": {
          "type": "string"
        },
        "technical": {
          "type": "string"
        }
      }
    },
    "v1CreateAccessKeyRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "v1CreateAccessKeyResponse": {
      "type": "object",
      "properties": {
        "accessKeyID": {
          "type": "string"
        },
        "accessSecret": {
          "type": "string"
        }
      }
    },
    "v1CreateAccountResponse": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CreateClientRequest": {
      "type": "object",
      "properties": {
        "suffix": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "base_color": {
          "type": "string"
        }
      }
    },
    "v1CreateClientResponse": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/v1OIDCClient"
        }
      }
    },
    "v1CreateFederationConfigRequest": {
      "type": "object",
      "properties": {
        "fedType": {
          "$ref": "#/definitions/v1FederationType"
        },
        "oidcEndpoint": {
          "type": "string",
          "title": "OIDC Config"
        },
        "oidcClientID": {
          "type": "string"
        },
        "oidcClientSecret": {
          "type": "string"
        },
        "oidcScopes": {
          "type": "string"
        },
        "oidcUseSecret": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1CreateFederationConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1FederationConfig"
        }
      }
    },
    "v1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      }
    },
    "v1CreatePolicyResponse": {
      "type": "object",
      "properties": {
        "policyID": {
          "type": "string"
        }
      }
    },
    "v1CreateRoleRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1CreateRoleResponse": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        }
      }
    },
    "v1CreateUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "federationID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CreateUserResponse": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "v1DeleteAccessKeyResponse": {
      "type": "object"
    },
    "v1DeleteAccountResponse": {
      "type": "object"
    },
    "v1DeleteClientResponse": {
      "type": "object"
    },
    "v1DeletePolicyResponse": {
      "type": "object"
    },
    "v1DeleteRoleResponse": {
      "type": "object"
    },
    "v1DeleteUserResponse": {
      "type": "object"
    },
    "v1FederationConfig": {
      "type": "object",
      "properties": {
        "fedID": {
          "type": "string",
          "format": "int64"
        },
        "fedType": {
          "$ref": "#/definitions/v1FederationType"
        },
        "oidcEndpoint": {
          "type": "string",
          "title": "OIDC Config"
        },
        "oidcClientID": {
          "type": "string"
        },
        "oidcClientSecret": {
          "type": "string"
        },
        "oidcScopes": {
          "type": "string"
        },
        "oidcUseSecret": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1FederationType": {
      "type": "string",
      "enum": [
        "Oidc"
      ],
      "default": "Oidc"
    },
    "v1GetAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1GetClientsResponse": {
      "type": "object",
      "properties": {
        "client": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCClient"
          }
        }
      }
    },
    "v1GetDefaultPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          }
        }
      }
    },
    "v1GetFederationConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1FederationConfig"
        }
      }
    },
    "v1GetPasswordPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordPolicy"
        }
      }
    },
    "v1GetPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          }
        }
      }
    },
    "v1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      }
    },
    "v1GetRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1Role"
        }
      }
    },
    "v1GetRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1GetUserAccessKeysResponse": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AccessKey"
          }
        }
      }
    },
    "v1GetUserIDByEmailResponse": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "v1GetUserInfoResponse": {
      "type": "object",
      "properties": {
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        }
      }
    },
    "v1GetUsersForRoleResponse": {
      "type": "object",
      "properties": {
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "totalRows": {
          "type": "string",
          "format": "int64"
        },
        "offset": {
          "type": "string",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          },
          "title": "string offsetID = 4"
        }
      }
    },
    "v1OIDCClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "base_color": {
          "type": "string"
        }
      }
    },
    "v1PasswordPolicy": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "string",
          "format": "int64"
        },
        "useLowerLetters": {
          "type": "boolean",
          "format": "boolean"
        },
        "useUpperLetters": {
          "type": "boolean",
          "format": "boolean"
        },
        "useNumbers": {
          "type": "boolean",
          "format": "boolean"
        },
        "useSpecialCharecters": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1PaymentDetails": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/PaymentDetailsPaymentType"
        },
        "info": {
          "type": "string"
        }
      }
    },
    "v1Permission": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Action"
          }
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Policy": {
      "type": "object",
      "properties": {
        "policyID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Permission"
          }
        }
      }
    },
    "v1RemovePoliciesFromRoleRequest": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemovePoliciesFromRoleResponse": {
      "type": "object",
      "properties": {
        "failedPolicyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemovePoliciesFromUserRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemovePoliciesFromUserResponse": {
      "type": "object",
      "properties": {
        "failedPolicyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemoveUsersFromRoleRequest": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemoveUsersFromRoleResponse": {
      "type": "object",
      "properties": {
        "failedUserIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResetPasswordRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "v1ResetPasswordResponse": {
      "type": "object"
    },
    "v1Role": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RoleUpdate": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1SetPasswordRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "userPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "v1SetPasswordResponse": {
      "type": "object"
    },
    "v1UpdateAccountRequest": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1UpdateAccountResponse": {
      "type": "object"
    },
    "v1UpdateClientRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "base_color": {
          "type": "string"
        }
      }
    },
    "v1UpdateClientResponse": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/v1OIDCClient"
        }
      }
    },
    "v1UpdatePolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      }
    },
    "v1UpdatePolicyResponse": {
      "type": "object"
    },
    "v1UpdateRoleRequest": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1RoleUpdate"
        }
      }
    },
    "v1UpdateRoleResponse": {
      "type": "object"
    },
    "v1UpdateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserUpdate"
        }
      }
    },
    "v1UpdateUserResponse": {
      "type": "object"
    },
    "v1User": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "lastLogin": {
          "type": "string",
          "format": "int64"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "federationID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1UserInfo": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "format": "int64"
        },
        "userID": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          }
        },
        "logoutUrl": {
          "type": "string"
        }
      }
    },
    "v1UserUpdate": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "federationID": {
          "type": "string",
          "format": "int64"
        }
      }
    }
  }
}
