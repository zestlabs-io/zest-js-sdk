{
  "swagger": "2.0",
  "info": {
    "title": "Cloud Functions",
    "version": "1.0",
    "contact": {
      "name": "Zest Labs GmbH",
      "url": "https://zestlabs.io/",
      "email": "contact@zestlabs.io"
    }
  },
  "tags": [
    {
      "name": "FunctionsService"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/func/v1/call-sync/{id}": {
      "post": {
        "summary": "Call a function synchroniously",
        "operationId": "FunctionsService_CallSyncFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsCallFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "payloadJSON",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/call-test/{id}": {
      "post": {
        "summary": "Test a function call",
        "operationId": "FunctionsService_CallTestFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsCallFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "payloadJSON",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/function": {
      "post": {
        "summary": "Create function",
        "operationId": "FunctionsService_CreateFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsCreateFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/functionsCreateFunctionRequest"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      },
      "put": {
        "summary": "Update function",
        "operationId": "FunctionsService_UpdateFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsUpdateFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/functionsFunction"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/function/{function.id}": {
      "patch": {
        "summary": "Update function",
        "operationId": "FunctionsService_UpdateFunction2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsUpdateFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "function.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/functionsFunction"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/function/{id}": {
      "get": {
        "summary": "Get function",
        "operationId": "FunctionsService_GetFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsGetFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      },
      "delete": {
        "summary": "Delete function",
        "operationId": "FunctionsService_DeleteFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsDeleteFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/functions": {
      "get": {
        "summary": "Fetch all functions",
        "operationId": "FunctionsService_GetFunctions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsGetFunctionsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/post-call/{reason}/{call.id}": {
      "post": {
        "summary": "Post function for execution in async way",
        "operationId": "FunctionsService_CallAsyncFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsCallAsyncFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "reason",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "call.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    }
  },
  "definitions": {
    "functionsCallAsyncFunctionRequest": {
      "type": "object",
      "properties": {
        "call": {
          "$ref": "#/definitions/functionsCallFunctionRequest"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "functionsCallAsyncFunctionResponse": {
      "type": "object"
    },
    "functionsCallFunctionRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "payloadJSON": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "functionsCallFunctionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "err": {
          "type": "string"
        },
        "body": {
          "type": "object"
        }
      }
    },
    "functionsCaller": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "format": "int64"
        },
        "userID": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "policies": {
          "type": "string"
        }
      }
    },
    "functionsCreateFunctionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "funcType": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "config": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "functionsCreateFunctionResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "functionsDeleteFunctionResponse": {
      "type": "object"
    },
    "functionsFunction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "funcType": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "config": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "functionsGetFunctionResponse": {
      "type": "object",
      "properties": {
        "function": {
          "$ref": "#/definitions/functionsFunction"
        },
        "result": {
          "$ref": "#/definitions/functionsFunction"
        }
      }
    },
    "functionsGetFunctionsResponse": {
      "type": "object",
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/functionsFunction"
          }
        }
      }
    },
    "functionsUpdateFunctionResponse": {
      "type": "object"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name whose content describes the type of the\nserialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the\nfollowing restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n  The name should be in a canonical form (e.g., leading \".\" is\n  not accepted).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
