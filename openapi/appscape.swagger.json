{
  "swagger": "2.0",
  "info": {
    "title": "appscape",
    "version": "1.0",
    "contact": {
      "name": "Zest Labs GmbH",
      "url": "https://zestlabs.io/",
      "email": "contact@zestlabs.io"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/appscape/v1/logs/labels": {
      "get": {
        "summary": "Retrieve all labels and possible values currently used to index the logs.",
        "operationId": "AppscapeService_GetLogLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLogLabelsResponse"
            }
          },
          "400": {
            "description": "Returned when the caller provided incorrect request parameters.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "403": {
            "description": "Returned when the caller is not authorised to perform this call.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an error occurred while processing the process.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AppscapeService"
        ]
      }
    },
    "/api/appscape/v1/logs/query": {
      "post": {
        "summary": "Retrieve all logs that match the provided filters.",
        "operationId": "AppscapeService_QueryLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1QueryLogsResponse"
            }
          },
          "400": {
            "description": "Returned when the caller provided incorrect request parameters.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "403": {
            "description": "Returned when the caller is not authorised to perform this call.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an error occurred while processing the process.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1QueryLogsRequest"
            }
          }
        ],
        "tags": [
          "AppscapeService"
        ]
      }
    },
    "/api/appscape/v1/metrics/meta": {
      "get": {
        "summary": "List all available metrics in the system, returning metric name and \nshort description.",
        "operationId": "AppscapeService_GetMetricsMeta",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMetricsMetaResponse"
            }
          },
          "400": {
            "description": "Returned when the caller provided incorrect request parameters.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "403": {
            "description": "Returned when the caller is not authorised to perform this call.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an error occurred while processing the process.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AppscapeService"
        ]
      }
    },
    "/api/appscape/v1/metrics/query": {
      "post": {
        "summary": "Retrieve data of a metrics, matching the provided parameters.",
        "operationId": "AppscapeService_QueryMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1QueryMetricsResponse"
            }
          },
          "400": {
            "description": "Returned when the caller provided incorrect request parameters.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "403": {
            "description": "Returned when the caller is not authorised to perform this call.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an error occurred while processing the process.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1QueryMetricsRequest"
            }
          }
        ],
        "tags": [
          "AppscapeService"
        ]
      }
    }
  },
  "definitions": {
    "LogEntrySeverity": {
      "type": "string",
      "enum": [
        "TRACE",
        "INFO",
        "WARNING",
        "ERROR",
        "AUDIT",
        "ALL"
      ],
      "default": "TRACE"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1DataPoint": {
      "type": "object",
      "properties": {
        "t": {
          "type": "string",
          "format": "int64"
        },
        "v": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "A DataPoint represents a single data point in a metrics series and consists \nof a timestamp and the value for the metric at the specific time."
    },
    "v1GetLogLabelsResponse": {
      "type": "object",
      "properties": {
        "loglabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LabelValues"
          }
        }
      },
      "title": "GetLogLabelsResponse contains a list of all possible label name-value pairs\nthat can be used to filter the"
    },
    "v1GetMetricsMetaResponse": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MetricMeta"
          }
        }
      },
      "description": "GetMetricsMetaResponse contains a list of metric meta objects, describing\nall metrics that are currently available in the system."
    },
    "v1Label": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Labels are name-value pairs that are used to annotate metrics or log entries."
    },
    "v1LabelFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/v1LabelFilterOperator"
        }
      },
      "description": "The LabelFilter is used to filter metrics based on their labels. The filter \ncan be one of EQ (equals), NE (not-equals), RM (regex-match), and NM (not \nmatching regex)."
    },
    "v1LabelFilterOperator": {
      "type": "string",
      "enum": [
        "EQ",
        "NE",
        "RM",
        "NM"
      ],
      "default": "EQ"
    },
    "v1LabelValues": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "LabelValues contain a list of all possible values per label name."
    },
    "v1LogEntry": {
      "type": "object",
      "properties": {
        "logId": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/LogEntrySeverity"
        },
        "source": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LogEntryField"
          }
        }
      },
      "description": "LogEntry is a single log messsage which consists of a set of fields or \nattributes, some of which are available to all messages, and others are \nspecific to the event that created the message."
    },
    "v1LogEntryField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "A log entry field represents one single attribute of the log entry, which\nconsists of a name and value pair and is not part of the default structure\nof log messages."
    },
    "v1MetricAggregation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/v1MetricAggregationOperator"
        },
        "preserve": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Aggregations can be used in metric queries to retrieve a summary of the\nunderlying metric data based on single labels."
    },
    "v1MetricAggregationOperator": {
      "type": "string",
      "enum": [
        "SUM",
        "AVG",
        "MIN",
        "MAX"
      ],
      "default": "SUM"
    },
    "v1MetricMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "MetricMeta contains a name of a metric and a short description, indicating\nwhat this metric is representing."
    },
    "v1MetricSeries": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Label"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1DataPoint"
          }
        }
      },
      "description": "MetricSeries contains the data for a single metric for a requested time span.\nThe object contains both the labels for the result, as well as the actual \ndata points."
    },
    "v1QueryLogsRequest": {
      "type": "object",
      "properties": {
        "time_from": {
          "type": "string",
          "format": "int64"
        },
        "time_till": {
          "type": "string",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Label"
          }
        },
        "match": {
          "type": "string"
        },
        "not_match": {
          "type": "string"
        }
      },
      "description": "The QueryLogsRequest contains all parameters for searching for log entries\ninside the appscape log store. Those parameters will filter the logs that\nwill be retrieved to only provide entries that macht the values in the \nrequest."
    },
    "v1QueryLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LogEntry"
          }
        }
      },
      "description": "QueryLogsResponse contains a list of log entries that match the request \nparameters."
    },
    "v1QueryMetricsRequest": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "string"
        },
        "time_from": {
          "type": "string",
          "format": "int64"
        },
        "time_till": {
          "type": "string",
          "format": "int64"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LabelFilter"
          }
        },
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MetricAggregation"
          }
        }
      },
      "description": "The QueryMetricsRequest is used to retrieve data for a specific metric in\na time period. Additionally, filters can be provided to only retrieve data\npoints for a certain label, as well as aggregations, that can be used to \nget a summary over the underlying data."
    },
    "v1QueryMetricsResponse": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MetricSeries"
          }
        }
      },
      "description": "QueryMetricsResponse contains a list of metrics series objects that hold \ndata for the respecive metrics, which matches the parameters provided in \nthe query request."
    }
  }
}
