{
  "swagger": "2.0",
  "info": {
    "title": "Zest API",
    "version": "1.0",
    "contact": {
      "name": "Zest",
      "url": "https://zestlabs.io",
      "email": "contact@zestlabs.io"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/appscape/v1/logs/labels": {
      "get": {
        "summary": "Retrieve all labels and possible values currently used to index the logs.",
        "operationId": "AppscapeService_GetLogLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLogLabelsResponse"
            }
          },
          "400": {
            "description": "Returned when the caller provided incorrect request parameters.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "403": {
            "description": "Returned when the caller is not authorised to perform this call.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an error occurred while processing the process.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AppscapeService"
        ]
      }
    },
    "/api/appscape/v1/logs/query": {
      "post": {
        "summary": "Retrieve all logs that match the provided filters.",
        "operationId": "AppscapeService_QueryLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1QueryLogsResponse"
            }
          },
          "400": {
            "description": "Returned when the caller provided incorrect request parameters.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "403": {
            "description": "Returned when the caller is not authorised to perform this call.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an error occurred while processing the process.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1QueryLogsRequest"
            }
          }
        ],
        "tags": [
          "AppscapeService"
        ]
      }
    },
    "/api/appscape/v1/metrics/meta": {
      "get": {
        "summary": "List all available metrics in the system, returning metric name and \nshort description.",
        "operationId": "AppscapeService_GetMetricsMeta",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMetricsMetaResponse"
            }
          },
          "400": {
            "description": "Returned when the caller provided incorrect request parameters.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "403": {
            "description": "Returned when the caller is not authorised to perform this call.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an error occurred while processing the process.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AppscapeService"
        ]
      }
    },
    "/api/appscape/v1/metrics/query": {
      "post": {
        "summary": "Retrieve data of a metrics, matching the provided parameters.",
        "operationId": "AppscapeService_QueryMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1QueryMetricsResponse"
            }
          },
          "400": {
            "description": "Returned when the caller provided incorrect request parameters.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "403": {
            "description": "Returned when the caller is not authorised to perform this call.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an error occurred while processing the process.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1QueryMetricsRequest"
            }
          }
        ],
        "tags": [
          "AppscapeService"
        ]
      }
    },
    "/api/auth/v1/accesskey": {
      "post": {
        "summary": "CreateAccessKey creates a new access key for user",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`CreateAccessKey`\n\t\tScope:\t\t\tuser ID",
        "operationId": "AuthService_CreateAccessKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAccessKeyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAccessKeyRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/accesskey/{accessKeyID}": {
      "delete": {
        "summary": "DeleteAccessKey deletes access key for user",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`DeleteAccessKey`\n\t\tScope:\t\t\tuser ID",
        "operationId": "AuthService_DeleteAccessKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAccessKeyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "accessKeyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/account": {
      "get": {
        "operationId": "AuthService_GetOwnAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAccountResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/account/{account.accountID}": {
      "put": {
        "operationId": "AuthService_UpdateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAccountResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "account.accountID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateAccountRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/check-hmac": {
      "post": {
        "summary": "Auth API",
        "operationId": "AuthService_CheckHMACAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckHMACAuthResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckHMACAuthRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/check-token": {
      "post": {
        "operationId": "AuthService_CheckTokenAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckTokenAuthResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckTokenAuthRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/check-username-exists": {
      "post": {
        "summary": "CheckUsernameExists checks in the database if there is already user with the same username\nIf userID is provided and there is already defined username for this userID the method\nwi return false, so that the username can be used for this user",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`CheckUsernameExists`\n\t\tScope:\t\t\t`*`",
        "operationId": "AuthService_CheckUsernameExists",
        "responses": {
          "200": {
            "description": "Returned when check was performed successfuly.",
            "schema": {
              "$ref": "#/definitions/v1CheckUsernameExistsResponse"
            }
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckUsernameExistsRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/client": {
      "post": {
        "summary": "CreateClient will try to create a new oidc client for the account with the\naccountID concatenated with suffix provided in the request. If the client already exists\nor there are already 20 clients, an error will be returned.",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`CreateClient`\n\t\tScope:",
        "operationId": "AuthService_CreateClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateClientResponse"
            },
            "examples": {
              "application/json": {
                "client": "The client that have been created"
              }
            }
          },
          "400": {
            "description": "Returned when no valid client ID is provided in the request, or the account has already has 20 clients.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateClientRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/client/{id}": {
      "delete": {
        "summary": "DeleteClient will delete the client with the provided ID and return\nan error, if a key with this ID does not exist, or is not part of accounts clients",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`DeleteClient`\n\t\tScope:\t\t\tclient ID",
        "operationId": "AuthService_DeleteClient",
        "responses": {
          "200": {
            "description": "Returned when Client is successfuly deleted.",
            "schema": {
              "$ref": "#/definitions/v1DeleteClientResponse"
            }
          },
          "400": {
            "description": "Returned when no valid client ID is provided in the request.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when a user with the provided ID could not be found within the scope of the account.",
            "schema": {}
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "put": {
        "summary": "UpdateClient updates the data for account client.",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`UpdateClient`\n\t\tScope:\t\t\t`id`",
        "operationId": "AuthService_UpdateClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateClientResponse"
            },
            "examples": {
              "application/json": {
                "client": "The client that have been updated"
              }
            }
          },
          "400": {
            "description": "Returned when no valid client ID is provided in the request.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when a client ID could not be found within the scope of the account.",
            "schema": {}
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateClientRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/clients": {
      "get": {
        "summary": "GetClients loads all clients for account.",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`GetClients`\n\t\tScope:\t\t\t``",
        "operationId": "AuthService_GetClients",
        "responses": {
          "200": {
            "description": "Returned when clients are successfuly fetched.",
            "schema": {
              "$ref": "#/definitions/v1GetClientsResponse"
            }
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/default-policies": {
      "get": {
        "operationId": "AuthService_GetDefaultPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultPoliciesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/federation": {
      "post": {
        "summary": "CreateFederationConfig will try to create a new oidc federation configuration, \nthat can be attached to users. The maximum registered federated configurations per account are 3.",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`CreateFederationConfig`\n\t\tScope:",
        "operationId": "AuthService_CreateFederationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateFederationConfigResponse"
            },
            "examples": {
              "application/json": {
                "config": "The config that have been created"
              }
            }
          },
          "400": {
            "description": "Returned when no valid client ID is provided in the request, or the account has already has 3 federation configs.",
            "schema": {}
          },
          "403": {
            "description": "Returned when the caller is not allowed to perform this call.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned whenever an internall error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateFederationConfigRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/password-policy": {
      "get": {
        "operationId": "AuthService_GetPasswordPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPasswordPolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/policies": {
      "get": {
        "operationId": "AuthService_GetPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPoliciesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/policy": {
      "post": {
        "operationId": "AuthService_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "put": {
        "operationId": "AuthService_UpdatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePolicyRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/policy/{policyID}": {
      "get": {
        "summary": "RBAC API",
        "operationId": "AuthService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "policyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "operationId": "AuthService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeletePolicyResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "policyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/reset-password": {
      "post": {
        "operationId": "AuthService_ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResetPasswordResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role": {
      "post": {
        "operationId": "AuthService_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "put": {
        "operationId": "AuthService_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/policies/add": {
      "post": {
        "operationId": "AuthService_AddPoliciesToRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddPoliciesToRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddPoliciesToRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/policies/remove": {
      "post": {
        "operationId": "AuthService_RemovePoliciesFromRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemovePoliciesFromRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemovePoliciesFromRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/users/add": {
      "post": {
        "operationId": "AuthService_AddUsersToRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddUsersToRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddUsersToRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/users/remove": {
      "post": {
        "operationId": "AuthService_RemoveUsersFromRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveUsersFromRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveUsersFromRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/users/{roleID}": {
      "get": {
        "operationId": "AuthService_GetUsersForRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersForRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "roleID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/role/{roleID}": {
      "get": {
        "operationId": "AuthService_GetRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "roleID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "operationId": "AuthService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRoleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "roleID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/roles": {
      "get": {
        "operationId": "AuthService_GetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRolesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/set-password": {
      "post": {
        "summary": "Password API",
        "operationId": "AuthService_SetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetPasswordResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetPasswordRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user": {
      "post": {
        "operationId": "AuthService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user-id-by-email/{email}": {
      "get": {
        "operationId": "AuthService_GetUserIDByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserIDByEmailResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/accesskeys/{userID}": {
      "get": {
        "summary": "GetUserAccessKeys returns all access keys by user",
        "description": "Authorisation requirements:\n\t\tService:\t\t`auth`\n\t\tCall:\t\t\t\t`GetUserAccessKeys`\n\t\tScope:\t\t\t`*`",
        "operationId": "AuthService_GetUserAccessKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserAccessKeysResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/policies/add": {
      "post": {
        "operationId": "AuthService_AddPoliciesToUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddPoliciesToUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddPoliciesToUserRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/policies/remove": {
      "post": {
        "operationId": "AuthService_RemovePoliciesFromUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemovePoliciesFromUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemovePoliciesFromUserRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/{user.userID}": {
      "put": {
        "operationId": "AuthService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "user.userID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/user/{userID}": {
      "get": {
        "operationId": "AuthService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "operationId": "AuthService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/userinfo": {
      "get": {
        "summary": "User API",
        "operationId": "AuthService_GetUserInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserInfoResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/auth/v1/users": {
      "get": {
        "operationId": "AuthService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/func/v1/call-sync/{id}": {
      "post": {
        "summary": "Call a function synchroniously",
        "operationId": "FunctionsService_CallSyncFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsCallFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/call-test/{id}": {
      "post": {
        "summary": "Test a function call",
        "operationId": "FunctionsService_CallTestFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsCallFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/function": {
      "post": {
        "summary": "Create function",
        "operationId": "FunctionsService_CreateFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsCreateFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/functionsCreateFunctionRequest"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      },
      "put": {
        "summary": "Update function",
        "operationId": "FunctionsService_UpdateFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsUpdateFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/functionsFunction"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/function/{function.id}": {
      "patch": {
        "summary": "Update function",
        "operationId": "FunctionsService_UpdateFunction2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsUpdateFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "function.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/functionsFunction"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/function/{id}": {
      "get": {
        "summary": "Get function",
        "operationId": "FunctionsService_GetFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsGetFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      },
      "delete": {
        "summary": "Delete function",
        "operationId": "FunctionsService_DeleteFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsDeleteFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/functions": {
      "get": {
        "summary": "Fetch all functions",
        "operationId": "FunctionsService_GetFunctions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsGetFunctionsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/func/v1/post-call/{reason}/{call.id}": {
      "post": {
        "summary": "Post function for execution in async way",
        "operationId": "FunctionsService_CallAsyncFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/functionsCallAsyncFunctionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "reason",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "call.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "FunctionsService"
        ]
      }
    },
    "/api/distribution/v1/app": {
      "post": {
        "summary": "Create mobile application",
        "operationId": "DistrConfigService_CreateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigCreateAppResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigMobileApp"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/app/pools/assign": {
      "post": {
        "summary": "Assign data pools to mobile application",
        "operationId": "DistrConfigService_AssignPoolsToApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigAssignPoolsToAppResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigAssignPoolsToAppRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/app/pools/unassign": {
      "post": {
        "summary": "Unassign data pool from mobile application",
        "operationId": "DistrConfigService_UnassignPoolsFromApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigUnassignPoolsFromAppResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigUnassignPoolsFromAppRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/app/users/assign": {
      "post": {
        "summary": "Assign mobile application to users",
        "operationId": "DistrConfigService_AssignAppToUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigAssignAppToUsersResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigAssignAppToUsersRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/app/users/unassign": {
      "post": {
        "summary": "Unassign mobile application from users",
        "operationId": "DistrConfigService_UnassignAppFromUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigUnassignAppFromUsersResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigUnassignAppFromUsersRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/app/{id}": {
      "get": {
        "summary": "Get a mobile application",
        "operationId": "DistrConfigService_GetApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigGetAppResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      },
      "delete": {
        "summary": "Delete mobile application",
        "operationId": "DistrConfigService_DeleteApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigDeleteAppResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/app/{id}/bundle": {
      "post": {
        "summary": "Set the mobile application bundle",
        "operationId": "DistrConfigService_SetAppBundle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigSetAppBundleResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigSetAppBundleRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/apps": {
      "get": {
        "summary": "Get all mobile applications",
        "operationId": "DistrConfigService_GetApps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigGetAppsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/pool": {
      "post": {
        "summary": "Create a data pool that can be used to distribute data to mobile users.",
        "description": "Errors:\n- 400    Returned when no valid pool definition is provided in the request\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_CreatePool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigCreatePoolResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigDataPool"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      },
      "put": {
        "summary": "Update an already existing data pool.",
        "description": "Errors:\n- 400    Returned when no valid pool definition is provided in the request\n- 404    Returned when a pool with the given ID does not exist\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_UpdatePool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigUpdatePoolResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigDataPool"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/pool/activate": {
      "post": {
        "summary": "Activate data pool, which will enable the distribution of its data to \nmobile users.",
        "description": "Errors:\n- 400    Returned when no valid pool ID is provided in the request, or \n         when the pool is already active\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_ActivatePool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigActivatePoolResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigActivatePoolRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/pool/distribution/{id}": {
      "get": {
        "summary": "Get the data distribution details for the pool.",
        "description": "Errors:\n- 400    Returned when no valid pool ID is provided in the request\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_GetPoolDistribution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigGetPoolDistributionResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/pool/validate": {
      "post": {
        "summary": "Validate pool data against pool specification",
        "description": "Errors:\n- 400    Returned when no valid pool definition is provided in the request\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_ValidatePoolData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigValidatePoolDataResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigValidatePoolDataRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/pool/{dataPool.id}": {
      "patch": {
        "summary": "Update an already existing data pool.",
        "description": "Errors:\n- 400    Returned when no valid pool definition is provided in the request\n- 404    Returned when a pool with the given ID does not exist\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_UpdatePool2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigUpdatePoolResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "dataPool.id",
            "description": "Primary key together with accountId - should be unique by client - used also as name of the pool",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigDataPool"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/pool/{id}": {
      "get": {
        "summary": "Get the data pool with the given ID.",
        "description": "Errors:\n- 400    Returned when no valid pool ID is provided in the request\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_GetPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigGetPoolResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      },
      "delete": {
        "summary": "Delete data pool with all its data from the system and the mobile users' \ndevices.",
        "description": "Errors:\n- 400    Returned when no valid pool ID is provided in the request\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_DeletePool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigDeletePoolResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/pools": {
      "get": {
        "summary": "Get the list of all data pool that have been created in the system.",
        "description": "Errors:\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_GetPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigGetPoolsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "DistrConfigService"
        ]
      },
      "post": {
        "summary": "Create several data pools, which can be used to distribute data to mobile users.",
        "description": "Errors:\n- 400    Returned when no valid pool definitions are provided in the request\n- 403    Returned when the caller is not allowed to perform this call\n- 500    Returned whenever an internall error occurs",
        "operationId": "DistrConfigService_CreatePools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigCreatePoolsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigCreatePoolsRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/user": {
      "post": {
        "summary": "Registers user in distribution database",
        "operationId": "DistrConfigService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigCreateUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigCreateUserRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/user/tags/assign": {
      "post": {
        "summary": "Assign filtering tag to user",
        "operationId": "DistrConfigService_AssignTagToUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigAssignTagToUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigAssignTagToUserRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/user/tags/unassign": {
      "post": {
        "summary": "Unassign filtering tag from user",
        "operationId": "DistrConfigService_UnassignTagFromUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigUnassignTagFromUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/distrconfigUnassignTagFromUserRequest"
            }
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/user/{id}": {
      "delete": {
        "summary": "Deletes user from distribution db",
        "operationId": "DistrConfigService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigDeleteUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/user/{userID}": {
      "get": {
        "summary": "Fetch the user with the given ID",
        "operationId": "DistrConfigService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigGetUserResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/distribution/v1/users": {
      "get": {
        "summary": "Fetch all users in account distribution db",
        "operationId": "DistrConfigService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/distrconfigGetUsersResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "DistrConfigService"
        ]
      }
    },
    "/api/data/_r/{poolId}": {
      "parameters": [
        {
          "name": "poolId",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Pool ID (e.g. orders)"
        }
      ],
      "get": {
        "summary": "List mobile data records",
        "operationId": "PoolDataService_List",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "number",
            "description": "The max number of records to fetch."
          },
          {
            "name": "skip",
            "in": "query",
            "required": true,
            "type": "number",
            "description": "The records to skip from the beggining"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataListResponse"
            }
          },
          "400": {
            "description": "Returned when input parameters are not provided or correct",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "tags": [
          "PoolDataService"
        ]
      },
      "delete": {
        "summary": "Bulk delete records from mobile data pool",
        "operationId": "PoolDataService_BulkDelete",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataBulkDeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataBulkDeleteResponse"
            }
          },
          "400": {
            "description": "Returned when input parameters are not provided",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "tags": [
          "PoolDataService"
        ]
      },
      "put": {
        "summary": "Bulk update records in mobile data pool",
        "operationId": "PoolDataService_BulkUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataBulkUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataBulkUpdateResponse"
            }
          },
          "400": {
            "description": "Returned when input parameters are not provided",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "tags": [
          "PoolDataService"
        ]
      },
      "post": {
        "summary": "Bulk create mobile data records in a pool",
        "operationId": "PoolDataService_BulkCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataBulkCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataBulkCreateResponse"
            }
          },
          "400": {
            "description": "Returned when input parameters are not provided",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "tags": [
          "PoolDataService"
        ]
      }
    },
    "/api/data/_r/{poolId}/{id}": {
      "parameters": [
        {
          "name": "poolId",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Pool ID (e.g. orders)"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID (Primary Key) of the record"
        }
      ],
      "get": {
        "summary": "Get single mobile data record",
        "operationId": "PoolDataService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataGetResponse"
            }
          },
          "400": {
            "description": "Returned when input parameters are not provided",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the document does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "tags": [
          "PoolDataService"
        ]
      }
    },
    "/api/data/_r/{poolId}/{id}/{attname}": {
      "parameters": [
        {
          "name": "poolId",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Pool ID (e.g. orders)"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID (Primary Key) of the record"
        },
        {
          "name": "attname",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Attachment name"
        }
      ],
      "get": {
        "summary": "Get attachment",
        "operationId": "PoolDataService_GetAttachment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Returned when input parameters are not provided",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the document does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "tags": [
          "PoolDataService"
        ]
      },
      "put": {
        "summary": "Store attachment",
        "operationId": "PoolDataService_StoreAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "upfile",
            "in": "formData",
            "type": "file",
            "description": "The attachment content file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "400": {
            "description": "Returned when input parameters are not provided",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the document does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "tags": [
          "PoolDataService"
        ]
      },
      "delete": {
        "summary": "Delete attachment",
        "operationId": "PoolDataService_DeleteAttachment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "400": {
            "description": "Returned when input parameters are not provided",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "404": {
            "description": "Returned when the document does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "tags": [
          "PoolDataService"
        ]
      }
    }
  },
  "definitions": {
    "LogEntrySeverity": {
      "type": "string",
      "enum": [
        "TRACE",
        "INFO",
        "WARNING",
        "ERROR",
        "AUDIT",
        "ALL"
      ],
      "default": "TRACE"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name whose content describes the type of the\nserialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the\nfollowing restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n  The name should be in a canonical form (e.g., leading \".\" is\n  not accepted).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1DataPoint": {
      "type": "object",
      "properties": {
        "t": {
          "type": "string",
          "format": "int64"
        },
        "v": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "A DataPoint represents a single data point in a metrics series and consists \nof a timestamp and the value for the metric at the specific time."
    },
    "v1GetLogLabelsResponse": {
      "type": "object",
      "properties": {
        "loglabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LabelValues"
          }
        }
      },
      "title": "GetLogLabelsResponse contains a list of all possible label name-value pairs\nthat can be used to filter the"
    },
    "v1GetMetricsMetaResponse": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MetricMeta"
          }
        }
      },
      "description": "GetMetricsMetaResponse contains a list of metric meta objects, describing\nall metrics that are currently available in the system."
    },
    "v1Label": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Labels are name-value pairs that are used to annotate metrics or log entries."
    },
    "v1LabelFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/v1LabelFilterOperator"
        }
      },
      "description": "The LabelFilter is used to filter metrics based on their labels. The filter \ncan be one of EQ (equals), NE (not-equals), RM (regex-match), and NM (not \nmatching regex)."
    },
    "v1LabelFilterOperator": {
      "type": "string",
      "enum": [
        "EQ",
        "NE",
        "RM",
        "NM"
      ],
      "default": "EQ"
    },
    "v1LabelValues": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "LabelValues contain a list of all possible values per label name."
    },
    "v1LogEntry": {
      "type": "object",
      "properties": {
        "logId": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/LogEntrySeverity"
        },
        "source": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LogEntryField"
          }
        }
      },
      "description": "LogEntry is a single log messsage which consists of a set of fields or \nattributes, some of which are available to all messages, and others are \nspecific to the event that created the message."
    },
    "v1LogEntryField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "A log entry field represents one single attribute of the log entry, which\nconsists of a name and value pair and is not part of the default structure\nof log messages."
    },
    "v1MetricAggregation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/v1MetricAggregationOperator"
        },
        "preserve": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Aggregations can be used in metric queries to retrieve a summary of the\nunderlying metric data based on single labels."
    },
    "v1MetricAggregationOperator": {
      "type": "string",
      "enum": [
        "SUM",
        "AVG",
        "MIN",
        "MAX"
      ],
      "default": "SUM"
    },
    "v1MetricMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "MetricMeta contains a name of a metric and a short description, indicating\nwhat this metric is representing."
    },
    "v1MetricSeries": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Label"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1DataPoint"
          }
        }
      },
      "description": "MetricSeries contains the data for a single metric for a requested time span.\nThe object contains both the labels for the result, as well as the actual \ndata points."
    },
    "v1QueryLogsRequest": {
      "type": "object",
      "properties": {
        "time_from": {
          "type": "string",
          "format": "int64"
        },
        "time_till": {
          "type": "string",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Label"
          }
        },
        "severity": {
          "$ref": "#/definitions/LogEntrySeverity"
        },
        "match": {
          "type": "string"
        },
        "not_match": {
          "type": "string"
        }
      },
      "description": "The QueryLogsRequest contains all parameters for searching for log entries\ninside the appscape log store. Those parameters will filter the logs that\nwill be retrieved to only provide entries that macht the values in the \nrequest."
    },
    "v1QueryLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LogEntry"
          }
        }
      },
      "description": "QueryLogsResponse contains a list of log entries that match the request \nparameters."
    },
    "v1QueryMetricsRequest": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "string"
        },
        "time_from": {
          "type": "string",
          "format": "int64"
        },
        "time_till": {
          "type": "string",
          "format": "int64"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LabelFilter"
          }
        },
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MetricAggregation"
          }
        }
      },
      "description": "The QueryMetricsRequest is used to retrieve data for a specific metric in\na time period. Additionally, filters can be provided to only retrieve data\npoints for a certain label, as well as aggregations, that can be used to \nget a summary over the underlying data."
    },
    "v1QueryMetricsResponse": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MetricSeries"
          }
        }
      },
      "description": "QueryMetricsResponse contains a list of metrics series objects that hold \ndata for the respecive metrics, which matches the parameters provided in \nthe query request."
    },
    "AccountAccountStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "ACTIVE",
        "DISABLED",
        "DELETED"
      ],
      "default": "PENDING"
    },
    "PaymentDetailsPaymentType": {
      "type": "string",
      "enum": [
        "CreditCard",
        "Paypal",
        "DirectDebig",
        "Invoice"
      ],
      "default": "CreditCard"
    },
    "v1AccessKey": {
      "type": "object",
      "properties": {
        "accessKeyID": {
          "type": "string"
        },
        "lastUsedAt": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1Account": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/AccountAccountStatus"
        },
        "paymentDetails": {
          "$ref": "#/definitions/v1PaymentDetails"
        },
        "contactDetails": {
          "$ref": "#/definitions/v1ContactDetails"
        }
      }
    },
    "v1Action": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "call": {
          "type": "string"
        }
      }
    },
    "v1AddPoliciesToRoleRequest": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddPoliciesToRoleResponse": {
      "type": "object",
      "properties": {
        "failedPolicyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddPoliciesToUserRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddPoliciesToUserResponse": {
      "type": "object",
      "properties": {
        "failedPolicyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddUsersToRoleRequest": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AddUsersToRoleResponse": {
      "type": "object",
      "properties": {
        "failedUserIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CheckHMACAuthRequest": {
      "type": "object",
      "properties": {
        "httpMethod": {
          "type": "string"
        },
        "requestPath": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "authKey": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "md5Body": {
          "type": "string"
        },
        "validity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CheckHMACAuthResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "format": "byte"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "v1CheckTokenAuthRequest": {
      "type": "object",
      "properties": {
        "authKey": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "validity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CheckTokenAuthResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "format": "byte"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "v1CheckUsernameExistsRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        }
      }
    },
    "v1CheckUsernameExistsResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1ContactDetails": {
      "type": "object",
      "properties": {
        "main": {
          "type": "string"
        },
        "finance": {
          "type": "string"
        },
        "technical": {
          "type": "string"
        }
      }
    },
    "v1CreateAccessKeyRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "v1CreateAccessKeyResponse": {
      "type": "object",
      "properties": {
        "accessKeyID": {
          "type": "string"
        },
        "accessSecret": {
          "type": "string"
        }
      }
    },
    "v1CreateAccountResponse": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CreateClientRequest": {
      "type": "object",
      "properties": {
        "suffix": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "base_color": {
          "type": "string"
        }
      }
    },
    "v1CreateClientResponse": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/v1OIDCClient"
        }
      }
    },
    "v1CreateFederationConfigRequest": {
      "type": "object",
      "properties": {
        "fedType": {
          "$ref": "#/definitions/v1FederationType"
        },
        "oidcEndpoint": {
          "type": "string",
          "title": "OIDC Config"
        },
        "oidcClientID": {
          "type": "string"
        },
        "oidcClientSecret": {
          "type": "string"
        },
        "oidcScopes": {
          "type": "string"
        },
        "oidcUseSecret": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1CreateFederationConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1FederationConfig"
        }
      }
    },
    "v1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      }
    },
    "v1CreatePolicyResponse": {
      "type": "object",
      "properties": {
        "policyID": {
          "type": "string"
        }
      }
    },
    "v1CreateRoleRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1CreateRoleResponse": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        }
      }
    },
    "v1CreateUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "federationID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CreateUserResponse": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "v1DeleteAccessKeyResponse": {
      "type": "object"
    },
    "v1DeleteAccountResponse": {
      "type": "object"
    },
    "v1DeleteClientResponse": {
      "type": "object"
    },
    "v1DeletePolicyResponse": {
      "type": "object"
    },
    "v1DeleteRoleResponse": {
      "type": "object"
    },
    "v1DeleteUserResponse": {
      "type": "object"
    },
    "v1FederationConfig": {
      "type": "object",
      "properties": {
        "fedID": {
          "type": "string",
          "format": "int64"
        },
        "fedType": {
          "$ref": "#/definitions/v1FederationType"
        },
        "oidcEndpoint": {
          "type": "string",
          "title": "OIDC Config"
        },
        "oidcClientID": {
          "type": "string"
        },
        "oidcClientSecret": {
          "type": "string"
        },
        "oidcScopes": {
          "type": "string"
        },
        "oidcUseSecret": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1FederationType": {
      "type": "string",
      "enum": [
        "Oidc"
      ],
      "default": "Oidc"
    },
    "v1GetAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1GetClientsResponse": {
      "type": "object",
      "properties": {
        "client": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OIDCClient"
          }
        }
      }
    },
    "v1GetDefaultPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          }
        }
      }
    },
    "v1GetFederationConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1FederationConfig"
        }
      }
    },
    "v1GetPasswordPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PasswordPolicy"
        }
      }
    },
    "v1GetPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          }
        }
      }
    },
    "v1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      }
    },
    "v1GetRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1Role"
        }
      }
    },
    "v1GetRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1GetUserAccessKeysResponse": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AccessKey"
          }
        }
      }
    },
    "v1GetUserIDByEmailResponse": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "v1GetUserInfoResponse": {
      "type": "object",
      "properties": {
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        }
      }
    },
    "v1GetUsersForRoleResponse": {
      "type": "object",
      "properties": {
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "totalRows": {
          "type": "string",
          "format": "int64"
        },
        "offset": {
          "type": "string",
          "format": "int64"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          },
          "title": "string offsetID = 4"
        }
      }
    },
    "v1OIDCClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "base_color": {
          "type": "string"
        }
      }
    },
    "v1PasswordPolicy": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "string",
          "format": "int64"
        },
        "useLowerLetters": {
          "type": "boolean",
          "format": "boolean"
        },
        "useUpperLetters": {
          "type": "boolean",
          "format": "boolean"
        },
        "useNumbers": {
          "type": "boolean",
          "format": "boolean"
        },
        "useSpecialCharecters": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "v1PaymentDetails": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/PaymentDetailsPaymentType"
        },
        "info": {
          "type": "string"
        }
      }
    },
    "v1Permission": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Action"
          }
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Policy": {
      "type": "object",
      "properties": {
        "policyID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Permission"
          }
        }
      }
    },
    "v1RemovePoliciesFromRoleRequest": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemovePoliciesFromRoleResponse": {
      "type": "object",
      "properties": {
        "failedPolicyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemovePoliciesFromUserRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemovePoliciesFromUserResponse": {
      "type": "object",
      "properties": {
        "failedPolicyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemoveUsersFromRoleRequest": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RemoveUsersFromRoleResponse": {
      "type": "object",
      "properties": {
        "failedUserIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResetPasswordRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "v1ResetPasswordResponse": {
      "type": "object"
    },
    "v1Role": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RoleUpdate": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1SetPasswordRequest": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "userPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "v1SetPasswordResponse": {
      "type": "object"
    },
    "v1UpdateAccountRequest": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1UpdateAccountResponse": {
      "type": "object"
    },
    "v1UpdateClientRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "redirect_uri": {
          "type": "string"
        },
        "base_color": {
          "type": "string"
        }
      }
    },
    "v1UpdateClientResponse": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/v1OIDCClient"
        }
      }
    },
    "v1UpdatePolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      }
    },
    "v1UpdatePolicyResponse": {
      "type": "object"
    },
    "v1UpdateRoleRequest": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1RoleUpdate"
        }
      }
    },
    "v1UpdateRoleResponse": {
      "type": "object"
    },
    "v1UpdateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserUpdate"
        }
      }
    },
    "v1UpdateUserResponse": {
      "type": "object"
    },
    "v1User": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "lastLogin": {
          "type": "string",
          "format": "int64"
        },
        "policyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "federationID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1UserInfo": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "format": "int64"
        },
        "userID": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          }
        },
        "logoutUrl": {
          "type": "string"
        }
      }
    },
    "v1UserUpdate": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "federationID": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "functionsCallAsyncFunctionRequest": {
      "type": "object",
      "properties": {
        "call": {
          "$ref": "#/definitions/functionsCallFunctionRequest"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "functionsCallAsyncFunctionResponse": {
      "type": "object"
    },
    "functionsCallFunctionRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "payloadJSON": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "functionsCallFunctionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean"
        },
        "err": {
          "type": "string"
        },
        "body": {
          "type": "object"
        }
      }
    },
    "functionsCaller": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "format": "int64"
        },
        "userID": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "policies": {
          "type": "string"
        }
      }
    },
    "functionsCreateFunctionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "funcType": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "functionsCreateFunctionResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "functionsDeleteFunctionResponse": {
      "type": "object"
    },
    "functionsFunction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "funcType": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "functionsGetFunctionResponse": {
      "type": "object",
      "properties": {
        "function": {
          "$ref": "#/definitions/functionsFunction"
        },
        "result": {
          "$ref": "#/definitions/functionsFunction"
        }
      }
    },
    "functionsGetFunctionsResponse": {
      "type": "object",
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/functionsFunction"
          }
        }
      }
    },
    "functionsUpdateFunctionResponse": {
      "type": "object"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "distrconfigActivatePoolRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "distrconfigActivatePoolResponse": {
      "type": "object"
    },
    "distrconfigAssignAppToUsersRequest": {
      "type": "object",
      "properties": {
        "appID": {
          "type": "string"
        },
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigAssignAppToUsersResponse": {
      "type": "object",
      "properties": {
        "failedUserIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigAssignPoolsToAppRequest": {
      "type": "object",
      "properties": {
        "appID": {
          "type": "string"
        },
        "poolIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigAssignPoolsToAppResponse": {
      "type": "object",
      "properties": {
        "failedPoolIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigAssignTagToUserRequest": {
      "type": "object",
      "properties": {
        "poolID": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "tagValue": {
          "type": "string"
        }
      }
    },
    "distrconfigAssignTagToUserResponse": {
      "type": "object"
    },
    "distrconfigCreateAppResponse": {
      "type": "object"
    },
    "distrconfigCreatePoolResponse": {
      "type": "object",
      "title": "Contains data of createPoold data pool task"
    },
    "distrconfigCreatePoolsRequest": {
      "type": "object",
      "properties": {
        "dataPools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/distrconfigDataPool"
          }
        }
      }
    },
    "distrconfigCreatePoolsResponse": {
      "type": "object",
      "title": "Contains data of createPoold data pool task"
    },
    "distrconfigCreateUserRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "distrconfigCreateUserResponse": {
      "type": "object"
    },
    "distrconfigDataPool": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Primary key together with accountId - should be unique by client - used also as name of the pool"
        },
        "poolType": {
          "$ref": "#/definitions/distrconfigPoolType",
          "title": "The type of the pool - User, Filtered(with tags), Global (for the app)"
        },
        "pkExtractExpression": {
          "type": "string",
          "title": "http://goessner.net/articles/JsonPath/ expression to extract the primary key"
        },
        "tagExtractExpression": {
          "type": "string",
          "title": "http://goessner.net/articles/JsonPath/ expression to extract tags from the documents. For user type pools this is the user id"
        },
        "active": {
          "type": "boolean",
          "format": "boolean",
          "title": "When activated it locks the record and cannot be changed"
        },
        "schema": {
          "type": "string",
          "format": "byte",
          "title": "If set - should contain http://json-schema.org/ schema, that will validate every document"
        },
        "onUploadFunction": {
          "type": "string",
          "title": "Function to be called onUpload"
        }
      }
    },
    "distrconfigDataPoolShort": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Primary key together with accountId - should be unique by client - used also as name of the pool"
        },
        "poolType": {
          "$ref": "#/definitions/distrconfigPoolType",
          "title": "The type of the pool - User, Filtered(with tags), Global (for the app)"
        },
        "active": {
          "type": "boolean",
          "format": "boolean",
          "title": "When activated it locks the record and cannot be changed"
        }
      }
    },
    "distrconfigDeleteAppResponse": {
      "type": "object"
    },
    "distrconfigDeletePoolResponse": {
      "type": "object"
    },
    "distrconfigDeleteUserResponse": {
      "type": "object"
    },
    "distrconfigDistributionUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "activeAppID": {
          "type": "string"
        },
        "tagAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/distrconfigUserTagAssignment"
          }
        }
      }
    },
    "distrconfigGetAppResponse": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/distrconfigMobileAppWithPools"
        }
      }
    },
    "distrconfigGetAppsResponse": {
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/distrconfigMobileAppWithPools"
          }
        }
      }
    },
    "distrconfigGetPoolDistributionResponse": {
      "type": "object",
      "properties": {
        "dbUrl": {
          "type": "string"
        },
        "poolType": {
          "$ref": "#/definitions/distrconfigPoolType",
          "title": "The type of the pool - User, Filtered(with tags), Global (for the app)"
        },
        "tagPrefix": {
          "type": "string",
          "title": "Tag prefix used for determining if user assignments match the record"
        }
      }
    },
    "distrconfigGetPoolResponse": {
      "type": "object",
      "properties": {
        "dataPool": {
          "$ref": "#/definitions/distrconfigDataPool"
        }
      },
      "title": "Contains data pool task data specified in by ID request"
    },
    "distrconfigGetPoolsResponse": {
      "type": "object",
      "properties": {
        "dataPool": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/distrconfigDataPoolShort"
          },
          "title": "List of all data pool tasks"
        },
        "poolSizes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/distrconfigPoolSize"
          }
        }
      },
      "title": "Contains list of all data pool tasks"
    },
    "distrconfigGetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/distrconfigDistributionUser"
        }
      }
    },
    "distrconfigGetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/distrconfigDistributionUser"
          }
        }
      }
    },
    "distrconfigMobileApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Primary key - unique by account"
        },
        "bundleUrl": {
          "type": "string",
          "title": "Bundle URL for downloading the react bundle"
        },
        "active": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "distrconfigMobileAppWithPools": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "bundleUrl": {
          "type": "string"
        },
        "active": {
          "type": "boolean",
          "format": "boolean"
        },
        "assignedPools": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigPoolSize": {
      "type": "object",
      "properties": {
        "poolID": {
          "type": "string"
        },
        "globalDataSizeBytes": {
          "type": "string",
          "format": "int64"
        },
        "userDataSizeBytes": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "distrconfigPoolType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "GLOBAL",
        "FILTERED",
        "USER"
      ],
      "default": "UNKNOWN"
    },
    "distrconfigSetAppBundleRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "bundleUrl": {
          "type": "string"
        }
      }
    },
    "distrconfigSetAppBundleResponse": {
      "type": "object"
    },
    "distrconfigUnassignAppFromUsersRequest": {
      "type": "object",
      "properties": {
        "appID": {
          "type": "string"
        },
        "userIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigUnassignAppFromUsersResponse": {
      "type": "object",
      "properties": {
        "failedUserIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigUnassignPoolsFromAppRequest": {
      "type": "object",
      "properties": {
        "appID": {
          "type": "string"
        },
        "poolIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigUnassignPoolsFromAppResponse": {
      "type": "object",
      "properties": {
        "failedPoolIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "distrconfigUnassignTagFromUserRequest": {
      "type": "object",
      "properties": {
        "poolID": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "tagValue": {
          "type": "string"
        }
      }
    },
    "distrconfigUnassignTagFromUserResponse": {
      "type": "object"
    },
    "distrconfigUpdatePoolResponse": {
      "type": "object",
      "title": "Contains status of UpdatePool operation"
    },
    "distrconfigUserTagAssignment": {
      "type": "object",
      "properties": {
        "poolID": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "distrconfigValidatePoolDataRequest": {
      "type": "object",
      "properties": {
        "poolType": {
          "$ref": "#/definitions/distrconfigPoolType",
          "title": "The type of the pool - User, Filtered(with tags), Global (for the app)"
        },
        "pkExtractExpression": {
          "type": "string",
          "title": "http://goessner.net/articles/JsonPath/ expression to extract the primary key"
        },
        "tagExtractExpression": {
          "type": "string",
          "title": "http://goessner.net/articles/JsonPath/ expression to extract tags from the documents. For user type pools this is the user id"
        },
        "schema": {
          "type": "string",
          "format": "byte",
          "title": "If set - should contain http://json-schema.org/ schema, that will validate every document"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "distrconfigValidatePoolDataResponse": {
      "type": "object",
      "properties": {
        "derivedPk": {
          "type": "string"
        },
        "derivedTag": {
          "type": "string"
        },
        "validationErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "dataGetResponse": {
      "$ref": "#/definitions/dataDocument"
    },
    "dataBulkDeleteRequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dataDocument"
      }
    },
    "dataBulkDeleteResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "description": "Successful deletion",
          "items": {
            "$ref": "#/definitions/dataPersistResponse"
          }
        },
        "errors": {
          "type": "array",
          "description": "List of errors if any occur",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "dataBulkCreateRequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dataDocument"
      }
    },
    "dataBulkCreateResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "description": "Successful creation",
          "items": {
            "$ref": "#/definitions/dataPersistResponse"
          }
        },
        "errors": {
          "type": "array",
          "description": "List of errors if any occur",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "dataBulkUpdateRequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dataDocument"
      }
    },
    "dataBulkUpdateResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "description": "Successful creation",
          "items": {
            "$ref": "#/definitions/dataPersistResponse"
          }
        },
        "errors": {
          "type": "array",
          "description": "List of errors if any occur",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "dataPersistResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        }
      }
    },
    "dataListResponse": {
      "type": "object",
      "properties": {
        "total_rows": {
          "type": "number",
          "description": "The number of rows in the database"
        },
        "offset": {
          "type": "number",
          "description": "Current offset"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataDocument"
          }
        }
      }
    },
    "dataDocument": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "_id": {
          "type": "string"
        },
        "_rev": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "description": "Optional field for USER and FILTERED pools.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "_id"
      ]
    }
  }
}